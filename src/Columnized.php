<?php
/**
 * Yii2 Columnized.
 *
 * This file contains Columnized widget.
 *
 * @author  Aleksei Korotin <herr.offizier@gmail.com>
 */

namespace herroffizier\yii2columnized;

use yii\helpers\Html;
use yii\base\Widget;
use yii\helpers\ArrayHelper;
use yii\base\InvalidConfigException;

class Columnized extends Widget
{
    /**
     * Data source.
     *
     * @var \yii\data\DataProviderInterface
     */
    public $dataProvider;

    /**
     * Amount of columns.
     *
     * @var int
     */
    public $columns = 4;

    /**
     * Zero-based array of hardcoded column sizes.
     *
     * Note that last column will include all left items.
     *
     * @var int[]
     */
    public $columnSizes = [];

    /**
     * View file for container.
     *
     * If used, you should print $content in your view.
     *
     * If omitted, container will be generated automatically.
     *
     * @var string
     */
    public $containerView;

    /**
     * Options for autogenerated container.
     *
     * Use 'tag' option to change container's tag (div by default).
     *
     * @var array
     */
    public $containerOptions = [];

    /**
     * View file for column.
     *
     * If used, you should print $content in your view.
     *
     * If omitted, column will be generated automatically.
     *
     * @var string
     */
    public $columnView;

    /**
     * Options for autogenerated column.
     *
     * Use 'tag' option to change column's tag (div by default).
     *
     * @var array
     */
    public $columnOptions = [];

    /**
     * View file for item.
     *
     * Required.
     *
     * Model is passed in $model variable.
     *
     * @var string.
     */
    public $itemView;

    /**
     * Get items from data provider.
     *
     * @return array
     */
    protected function getItems()
    {
        return $this->dataProvider->getModels();
    }

    /**
     * Get item count for specified column.
     *
     * @param int $itemCount
     * @param int $columns
     * @param int $columnIndex
     *
     * @return int
     */
    protected function getItemsPerColumn($itemCount, $columnCount, $columnIndex)
    {
        return (int) (
            isset($this->columnSizes[$columnIndex])
                ? $this->columnSizes[$columnIndex]
                : ceil($itemCount / $columnCount)
            );
    }

    /**
     * Render wrapper block.
     *
     * If $view is not null, $view file will be rendered with $content and $widget variables
     * passed to it.
     * Ir $view is null, wrapper will be generated with $options array.
     *
     * Used by renderContainer and renderColumn.
     *
     * @param string|null $view
     * @param array       $options
     * @param string      $content
     * @param array       $viewOptions
     */
    protected function renderWrapper($view, array $options, $content, array $viewOptions)
    {
        if ($view) {
            echo $this->render($view, array_merge($viewOptions, ['content' => $content, 'widget' => $this]));
        } else {
            $tag = ArrayHelper::getValue($options, 'tag', 'div');
            unset($options['tag']);

            echo Html::tag($tag, $content, $options);
        }
    }

    /**
     * Render item.
     *
     * @param mixed $item
     */
    protected function renderItem($item)
    {
        echo $this->render($this->itemView, ['model' => $item, 'widget' => $this]);
    }

    /**
     * Render column.
     *
     * @param string $itemsContent
     * @param int    $columnIndex
     * @param int    $itemsInColumn
     */
    protected function renderColumn($itemsContent, $columnIndex, $itemsInColumn)
    {
        $this->renderWrapper(
            $this->columnView,
            $this->columnOptions,
            $itemsContent,
            ['columnIndex' => $columnIndex, 'itemsInColumn' => $itemsInColumn]
        );
    }

    /**
     * Begin new column.
     *
     * This method start output buffering.
     */
    protected function beginColumn()
    {
        ob_start();
    }

    /**
     * End current column.
     *
     * This method stops output buffering and renders column.
     *
     * @param int $columnIndex
     * @param int $itemsInColumn
     */
    protected function endColumn($columnIndex, $itemsInColumn)
    {
        $itemsContent = ob_get_clean();
        $this->renderColumn($itemsContent, $columnIndex, $itemsInColumn);
    }

    /**
     * Render container.
     *
     * @param string $columnsContent
     * @param int    $columnCount
     * @param int    $itemCount
     */
    protected function renderContainer($columnsContent, $columnCount, $itemCount)
    {
        $this->renderWrapper(
            $this->containerView,
            array_merge(
                $this->containerOptions,
                ['id' => $this->getId()]
            ),
            $columnsContent,
            ['columnCount' => $columnCount, 'itemCount' => $itemCount]
        );
    }

    /**
     * Begin container.
     *
     * This method start output buffering.
     */
    protected function beginContainer()
    {
        ob_start();
    }

    /**
     * End container.
     *
     * This method stops output buffering and renders container.
     *
     * @param int $columnCount
     * @param int $itemCount
     */
    protected function endContainer($columnCount, $itemCount)
    {
        $columnsContent = ob_get_clean();
        $this->renderContainer($columnsContent, $columnCount, $itemCount);
    }

    public function run()
    {
        if (!$this->dataProvider) {
            throw new InvalidConfigException('dataProvider parameter is required');
        }

        if (!$this->itemView) {
            throw new InvalidConfigException('itemView parameter is required');
        }

        $items = $this->getItems();
        $itemCount = count($items);
        $itemsPerColumn = $this->getItemsPerColumn($itemCount, $this->columns, 0);

        $this->beginContainer();

        $itemsInColumn = 0;
        $columnIndex = 0;
        foreach ($items as $item) {
            ++$itemsInColumn;

            if ($itemsInColumn === 1) {
                $this->beginColumn();
            }

            $this->renderItem($item);

            if ($itemsInColumn === $itemsPerColumn && ($columnIndex + 1 < $this->columns)) {
                $this->endColumn($columnIndex, $itemsInColumn);

                ++$columnIndex;
                $itemsInColumn = 0;
                $itemsPerColumn = $this->getItemsPerColumn($itemCount, $this->columns, $columnIndex);
            }
        }

        if ($itemsInColumn !== 0) {
            $this->endColumn($columnIndex, $itemsInColumn);

            ++$columnIndex;
        }

        $this->endContainer($columnIndex, $itemCount);
    }
}
